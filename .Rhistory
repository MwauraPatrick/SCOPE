Percentage = round((n / sum(n)) * 100, 1),
Label = paste0(Percentage, "%")
)
# Step 4: Plot
ggplot(family_gyne_summary, aes(x = reorder(family_gyneconditions, Percentage), y = Percentage, fill = family_gyneconditions)) +
geom_col(width =0.5, show.legend = FALSE) +
geom_text(aes(label = Label), hjust =1, size = 5) +
coord_flip() +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Family Members Affected by Gynecological Conditions",
x = "",
y = "Percentage"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text = element_text(size = 12)
)
ggsave("family.members.affected.png", width = 18, height = 12, units = "cm", dpi = 600)
family_diseases <- Cleaned_Data %>% select(9)
# Step 1: Select and clean the column
family_diseases <- Cleaned_Data %>%
select(family_diseases = 9) %>%
filter(!is.na(family_diseases) & family_diseases != "")
# Step 2: Clean up multi-responses
family_diseases_clean <- family_diseases %>%
separate_rows(family_diseases, sep = ",") %>%
mutate(
family_diseases = str_trim(family_diseases),
family_diseases = str_remove_all(family_diseases, "\\(.*?\\)"),
family_diseases = str_remove_all(family_diseases, "^[a-zA-Z]\\)"),
family_diseases = str_trim(family_diseases)
) %>%
filter(family_diseases != "")
# Step 3: Summarize
family_disease_summary <- family_diseases_clean %>%
count(family_diseases) %>%
mutate(
Percentage = round((n / sum(n)) * 100, 1),
Label = paste0(Percentage, "%")
)
# Step 4: Plot
ggplot(family_disease_summary, aes(x = reorder(family_diseases, Percentage), y = Percentage, fill = family_diseases)) +
geom_col(width = 0.7, show.legend = FALSE) +
geom_text(aes(label = Label), hjust = 0, size = 3) +
coord_flip() +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Reported Family Disease History",
x = "",
y = "Percentage"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text = element_text(size = 12)
)
ggsave("family.gyne.diseases.png", width = 18, height = 12, units = "cm", dpi = 600)
contraceptive_types <- Cleaned_Data %>% select(14)
# Step 1: Select and clean the column
contraceptive_types <- Cleaned_Data %>%
select(contraceptive_types = 14) %>%
filter(!is.na(contraceptive_types) & contraceptive_types != "")
# Step 2: Handle multiple responses, clean labels
contraceptive_types_clean <- contraceptive_types %>%
separate_rows(contraceptive_types, sep = ",") %>%
mutate(
contraceptive_types = str_trim(contraceptive_types),
contraceptive_types = str_remove_all(contraceptive_types, "\\(.*?\\)"),
contraceptive_types = str_remove_all(contraceptive_types, "^[a-zA-Z]\\)"),
contraceptive_types = str_trim(contraceptive_types)
) %>%
filter(contraceptive_types != "")
# Step 3: Summarize and calculate percentages
contraceptive_summary <- contraceptive_types_clean %>%
count(contraceptive_types) %>%
mutate(
Percentage = round((n / sum(n)) * 100, 1),
Label = paste0(Percentage, "%")
)
# Step 4: Plot
ggplot(contraceptive_summary, aes(x = reorder(contraceptive_types, Percentage), y = Percentage, fill = contraceptive_types)) +
geom_col(width = 0.7, show.legend = FALSE) +
geom_text(aes(label = Label), hjust = -0.2, size = 3) +
coord_flip() +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Types of Contraceptives Used",
x = "",
y = "Percentage"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text = element_text(size = 12)
)
ggsave("contraceptive.types.png", width = 18, height = 12, units = "cm", dpi = 600)
contraceptive_types <- Cleaned_Data %>% select(14)
# Step 1: Select and clean the column
contraceptive_types <- Cleaned_Data %>%
select(contraceptive_types = 14) %>%
filter(!is.na(contraceptive_types) & contraceptive_types != "")
# Step 2: Handle multiple responses, clean labels
contraceptive_types_clean <- contraceptive_types %>%
separate_rows(contraceptive_types, sep = ",") %>%
mutate(
contraceptive_types = str_trim(contraceptive_types),
contraceptive_types = str_remove_all(contraceptive_types, "\\(.*?\\)"),
contraceptive_types = str_remove_all(contraceptive_types, "^[a-zA-Z]\\)"),
contraceptive_types = str_trim(contraceptive_types)
) %>%
filter(contraceptive_types != "")
# Step 3: Summarize and calculate percentages
contraceptive_summary <- contraceptive_types_clean %>%
count(contraceptive_types) %>%
mutate(
Percentage = round((n / sum(n)) * 100, 1),
Label = paste0(Percentage, "%")
)
# Step 4: Plot
ggplot(contraceptive_summary, aes(x = reorder(contraceptive_types, Percentage), y = Percentage, fill = contraceptive_types)) +
geom_col(width = 0.7, show.legend = FALSE) +
geom_text(aes(label = Label), hjust = -0.2, size = 3) +
coord_flip() +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Types of Contraceptives Used",
x = "",
y = "Percentage"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text = element_text(size = 12)
)
ggsave("contraceptive.types.png", width = 18, height = 12, units = "cm", dpi = 600)
healthcare_access <- Cleaned_Data %>% select(51)
healthcare_access <- separate(healthcare_access,
col = Type.of.RHS,
into = c("RHS_1", "RHS_2", "RHS_3"),
sep = ",",
fill = "right",
remove = TRUE)
healthcare_access <- healthcare_access %>%
mutate(across(everything(), str_trim))
# healthcare_access<- healthcare_access %>% str_trim()
# Step 2: Pivot longer to get one RHS type per row
healthcare_access_long <- healthcare_access%>%
pivot_longer(cols = starts_with("RHS_"),
names_to = "RHS_source_number",
values_to = "RHS_type",
values_drop_na = TRUE) %>% drop_na()%>% filter(RHS_type!="")
table(healthcare_access_long$RHS_type)
# healthcare_access
healthcare_summary <- healthcare_access_long %>%
count(RHS_type) %>%
mutate(
Percentage = round(n / sum(n) * 100, 1),
Label = paste0(Percentage, "%")
) %>%
rename(healthcare_access = RHS_type)
colors_needed <- length(unique(healthcare_summary$healthcare_access))
palette_colors <- colorRampPalette(brewer.pal(12, "Paired"))(colors_needed)
ggplot(healthcare_summary, aes(x = reorder(healthcare_access, Percentage), y = Percentage, fill = healthcare_access)) +
geom_col(width = 0.7, show.legend = FALSE) +
geom_text(aes(label = Label), hjust = -0.2, size = 3) +
coord_flip() +
scale_fill_manual(values = palette_colors) +
labs(
title = "Access to Healthcare Services",
x = "",
y = "Percentage"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 1, face = "bold"),
axis.text = element_text(size = 12)
)
ggsave("RHS.Types.png", width = 18, height = 12, units = "cm", dpi = 600)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Required packages
library(ggplot2)
library(ggforce)
# Create base data for the balance beam and plates
beam <- data.frame(x = c(2, 8), y = c(4, 4))
support <- data.frame(x = c(5, 5), y = c(2, 4))
plates <- data.frame(
x = c(3, 7),
y = c(3.2, 3.2),
label = c(
"Underpowered\n✖ Missed effects\n↓ Low power",
"Overpowered\n✖ Wasted resources\n↑ High cost"
)
)
# Create plot
ggplot() +
# Beam
geom_line(data = beam, aes(x = x, y = y), size = 1.5) +
# Support
geom_line(data = support, aes(x = x, y = y), size = 1.5) +
# Plates as open circles
geom_circle(data = plates, aes(x0 = x, y0 = y, r = 0.6), color = "black", size = 1) +
# Labels on plates
geom_text(data = plates, aes(x = x, y = y - 1, label = label), size = 4, lineheight = 1.1) +
# Center label
annotate("text",
x = 5, y = 4.4, label = "Optimal Size\n“Just Big Enough”\n(Lenth, 2001)",
size = 4.5, fontface = "bold", hjust = 0.5
) +
# Caption
annotate("text",
x = 5, y = 0.5,
label = "Solar cooker PEPs often lack sample size guidance,\nleading to under- or over-powered studies.",
size = 3.5, fontface = "italic", hjust = 0.5
) +
# Theme and limits
theme_void() +
coord_fixed(xlim = c(1.5, 8.5), ylim = c(0, 5))
library(DiagrammeR)
grViz("
digraph methodology {
graph [layout = dot, rankdir = TB, splines = ortho]
node [shape = box, style = filled, fontname = Helvetica, fontsize = 13, penwidth=1.5, width=2.5, height=0.7]
# Main process nodes with improved color palette
pilot        [label = 'Pilot Data\\n(Initial Observed Data)', fillcolor = '#AED6F1']         // light blue
interpolator [label = 'Interpolating\\nAlgorithm', fillcolor = '#F9E79F']                    // light yellow
base_models  [label = 'Base Models\\n(LMM & CPH)', fillcolor = '#A3E4D7']                    // soft teal
sim_engine   [label = 'Sample Size Simulation Engine\\n(Fits n_sims & Computes Power)', fillcolor = '#F5B7B1']  // warm rose
power_out    [label = 'Power Estimates\\n(Proportion of Rejections)', shape = oval, fillcolor = '#D7BDE2']      // soft violet
# Explanation/annotation nodes
interp_note  [label = '↳ Returns data per\\ncandidate sample size', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
sim_note     [label = '↳ Fits n_sims per design\\nand returns power', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
# Edges
pilot -> interpolator
pilot -> base_models
base_models -> sim_engine [label = 'Parameter Estimates']
sim_engine -> interpolator [dir = both, arrowhead = inv, arrowtail = inv, label = 'Sample Requests & Data Return', penwidth = 2.5, style = bold]
sim_engine -> power_out [label = 'Compute Power']
# Note links
interpolator -> interp_note [arrowhead = none, style = dashed]
sim_engine -> sim_note [arrowhead = none, style = dashed]
}
")
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
# 1. Define your DiagrammeR graph
graph <- grViz("
digraph methodology {
graph [layout = dot, rankdir = TB, splines = ortho]
node [shape = box, style = filled, fontname = Helvetica, fontsize = 13, penwidth=1.5, width=2.5, height=0.7]
pilot        [label = 'Pilot Data\\n(Initial Observed Data)', fillcolor = '#AED6F1']
interpolator [label = 'Interpolating\\nAlgorithm', fillcolor = '#F9E79F']
base_models  [label = 'Base Models\\n(LMM & CPH)', fillcolor = '#A3E4D7']
sim_engine   [label = 'Sample Size Simulation Engine\\n(Fits n_sims & Computes Power)', fillcolor = '#F5B7B1']
power_out    [label = 'Power Estimates\\n(Proportion of Rejections)', shape = oval, fillcolor = '#D7BDE2']
interp_note  [label = '↳ Returns data per\\ncandidate sample size', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
sim_note     [label = '↳ Fits n_sims per design\\nand returns power', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
pilot -> interpolator
pilot -> base_models
base_models -> sim_engine [label = 'Parameter Estimates']
sim_engine -> interpolator [dir = both, arrowhead = inv, arrowtail = inv, label = 'Sample Requests & Data Return', penwidth = 2.5, style = bold]
sim_engine -> power_out [label = 'Compute Power']
interpolator -> interp_note [arrowhead = none, style = dashed]
sim_engine -> sim_note [arrowhead = none, style = dashed]
}
")
# 2. Export to SVG
svg_code <- export_svg(graph)
# 3. Convert SVG to high-quality PNG or PDF
rsvg_png(charToRaw(svg_code), file = "methodology_diagram.png", width = 2000, height = 1500)
rsvg_pdf(charToRaw(svg_code), file = "methodology_diagram.pdf", width = 20, height = 15)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Required packages
library(ggplot2)
library(ggforce)
# Create base data for the balance beam and plates
beam <- data.frame(x = c(2, 8), y = c(4, 4))
support <- data.frame(x = c(5, 5), y = c(2, 4))
plates <- data.frame(
x = c(3, 7),
y = c(3.2, 3.2),
label = c(
"Underpowered\n✖ Missed effects\n↓ Low power",
"Overpowered\n✖ Wasted resources\n↑ High cost"
)
)
# Create plot
ggplot() +
# Beam
geom_line(data = beam, aes(x = x, y = y), size = 1.5) +
# Support
geom_line(data = support, aes(x = x, y = y), size = 1.5) +
# Plates as open circles
geom_circle(data = plates, aes(x0 = x, y0 = y, r = 0.6), color = "black", size = 1) +
# Labels on plates
geom_text(data = plates, aes(x = x, y = y - 1, label = label), size = 4, lineheight = 1.1) +
# Center label
annotate("text",
x = 5, y = 4.4, label = "Optimal Size\n“Just Big Enough”\n(Lenth, 2001)",
size = 4.5, fontface = "bold", hjust = 0.5
) +
# Caption
annotate("text",
x = 5, y = 0.5,
label = "Solar cooker PEPs often lack sample size guidance,\nleading to under- or over-powered studies.",
size = 3.5, fontface = "italic", hjust = 0.5
) +
# Theme and limits
theme_void() +
coord_fixed(xlim = c(1.5, 8.5), ylim = c(0, 5))
library(DiagrammeR)
grViz("
digraph methodology {
graph [layout = dot, rankdir = TB, splines = ortho]
node [shape = box, style = filled, fontname = Helvetica, fontsize = 13, penwidth=1.5, width=2.5, height=0.7]
# Main process nodes with improved color palette
pilot        [label = 'Pilot Data\\n(Initial Observed Data)', fillcolor = '#AED6F1']         // light blue
interpolator [label = 'Interpolating\\nAlgorithm', fillcolor = '#F9E79F']                    // light yellow
base_models  [label = 'Base Models\\n(LMM & CPH)', fillcolor = '#A3E4D7']                    // soft teal
sim_engine   [label = 'Sample Size Simulation Engine\\n(Fits n_sims & Computes Power)', fillcolor = '#F5B7B1']  // warm rose
power_out    [label = 'Power Estimates\\n(Proportion of Rejections)', shape = oval, fillcolor = '#D7BDE2']      // soft violet
# Explanation/annotation nodes
interp_note  [label = '↳ Returns data per\\ncandidate sample size', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
sim_note     [label = '↳ Fits n_sims per design\\nand returns power', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
# Edges
pilot -> interpolator
pilot -> base_models
base_models -> sim_engine [label = 'Parameter Estimates']
sim_engine -> interpolator [dir = both, arrowhead = inv, arrowtail = inv, label = 'Sample Requests & Data Return', penwidth = 2.5, style = bold]
sim_engine -> power_out [label = 'Compute Power']
# Note links
interpolator -> interp_note [arrowhead = none, style = dashed]
sim_engine -> sim_note [arrowhead = none, style = dashed]
}
")
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
# 1. Define your DiagrammeR graph
graph <- grViz("
digraph methodology {
graph [layout = dot, rankdir = TB, splines = ortho]
node [shape = box, style = filled, fontname = Helvetica, fontsize = 13, penwidth=1.5, width=2.5, height=0.7]
pilot        [label = 'Pilot Data\\n(Initial Observed Data)', fillcolor = '#AED6F1']
interpolator [label = 'Interpolating\\nAlgorithm', fillcolor = '#F9E79F']
base_models  [label = 'Base Models\\n(LMM & CPH)', fillcolor = '#A3E4D7']
sim_engine   [label = 'Sample Size Simulation Engine\\n(Fits n_sims & Computes Power)', fillcolor = '#F5B7B1']
power_out    [label = 'Power Estimates\\n(Proportion of Rejections)', shape = oval, fillcolor = '#D7BDE2']
interp_note  [label = '↳ Returns data per\\ncandidate sample size', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
sim_note     [label = '↳ Fits n_sims per design\\nand returns power', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
pilot -> interpolator
pilot -> base_models
base_models -> sim_engine [label = 'Parameter Estimates']
sim_engine -> interpolator [dir = both, arrowhead = inv, arrowtail = inv, label = 'Sample Requests & Data Return', penwidth = 2.5, style = bold]
sim_engine -> power_out [label = 'Compute Power']
interpolator -> interp_note [arrowhead = none, style = dashed]
sim_engine -> sim_note [arrowhead = none, style = dashed]
}
")
# 2. Export to SVG
svg_code <- export_svg(graph)
# 3. Convert SVG to high-quality PNG or PDF
rsvg_png(charToRaw(svg_code), file = "methodology_diagram.png", width = 2000, height = 1500)
rsvg_pdf(charToRaw(svg_code), file = "methodology_diagram.pdf", width = 20, height = 15)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
# 1. Define your DiagrammeR graph
graph <- grViz("
digraph methodology {
graph [layout = dot, rankdir = TB, splines = ortho]
node [shape = box, style = filled, fontname = Helvetica, fontsize = 13, penwidth=1.5, width=2.5, height=0.7]
pilot        [label = 'Pilot Data\\n(From earlier experiments)', fillcolor = '#AED6F1']
interpolator [label = 'Simulation data generating\\nAlgorithm', fillcolor = '#F9E79F']
base_models  [label = 'Base Models\\n(LMM & CPH)', fillcolor = '#A3E4D7']
sim_engine   [label = 'Sample Size Simulation Engine\\n(Fits n_sims & Computes Power)', fillcolor = '#F5B7B1']
power_out    [label = 'Power Estimates\\n(Proportion of Rejections)', shape = oval, fillcolor = '#D7BDE2']
interp_note  [label = '↳ Returns data per\\ncandidate sample size', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
sim_note     [label = '↳ Fits n_sims per design\\nand returns power', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
pilot -> interpolator
pilot -> base_models
base_models -> sim_engine [label = 'Key parameter estimates']
sim_engine -> interpolator [dir = both, arrowhead = inv, arrowtail = inv, label = 'Sample Requests & Data Return', penwidth = 2.5, style = bold]
sim_engine -> power_out [label = 'Compute Power']
interpolator -> interp_note [arrowhead = none, style = dashed]
sim_engine -> sim_note [arrowhead = none, style = dashed]
}
")
# 2. Export to SVG
svg_code <- export_svg(graph)
# 3. Convert SVG to high-quality PNG or PDF
rsvg_png(charToRaw(svg_code), file = "methodology_diagram.png", width = 2000, height = 1500)
rsvg_pdf(charToRaw(svg_code), file = "methodology_diagram.pdf", width = 20, height = 15)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
# 1. Define your DiagrammeR graph
graph <- grViz("
digraph methodology {
graph [layout = dot, rankdir = TB, splines = ortho]
node [shape = box, style = filled, fontname = Helvetica, fontsize = 13, penwidth=1.5, width=2.5, height=0.7]
pilot        [label = 'Pilot Data\\n(From earlier experiments)', fillcolor = '#AED6F1']
interpolator [label = 'Simulation data generating\\nAlgorithm', fillcolor = '#F9E79F']
base_models  [label = 'Recomended Models\\n(LMM & CPH)', fillcolor = '#A3E4D7']
sim_engine   [label = 'Sample Size Simulation Engine\\n(Fits n_sims & Computes Power)', fillcolor = '#F5B7B1']
power_out    [label = 'Power Estimates\\n(Proportion of Rejections)', shape = oval, fillcolor = '#D7BDE2']
interp_note  [label = '↳ Returns data per\\ncandidate sample size', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
sim_note     [label = '↳ Fits n_sims per design\\nand returns power', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
pilot -> interpolator
pilot -> base_models
base_models -> sim_engine [label = 'Key parameter estimates']
sim_engine -> interpolator [dir = both, arrowhead = inv, arrowtail = inv, label = 'Sample Requests & Data Return', penwidth = 2.5, style = bold]
sim_engine -> power_out [label = 'Compute Power']
interpolator -> interp_note [arrowhead = none, style = dashed]
sim_engine -> sim_note [arrowhead = none, style = dashed]
}
")
# 2. Export to SVG
svg_code <- export_svg(graph)
# 3. Convert SVG to high-quality PNG or PDF
rsvg_png(charToRaw(svg_code), file = "methodology_diagram.png", width = 2000, height = 1500)
rsvg_pdf(charToRaw(svg_code), file = "methodology_diagram.pdf", width = 20, height = 15)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
# 1. Define your DiagrammeR graph
graph <- grViz("
digraph methodology {
graph [layout = dot, rankdir = TB, splines = ortho]
node [shape = box, style = filled, fontname = Helvetica, fontsize = 13, penwidth=1.5, width=2.5, height=0.7]
pilot        [label = 'Pilot Data\\n(From earlier experiments)', fillcolor = '#AED6F1']
interpolator [label = 'Simulation data generating\\nAlgorithm', fillcolor = '#F9E79F']
base_models  [label = 'Recommended models\\n(LMM & CPH)', fillcolor = '#A3E4D7']
sim_engine   [label = 'Sample Size Simulation Engine\\n(Fits n_sims & \\nComputes Power)', fillcolor = '#F5B7B1']
power_out    [label = 'Power Estimates\\n(Proportion of Rejections)', shape = oval, fillcolor = '#D7BDE2']
interp_note  [label = '↳ Returns data per\\ncandidate sample size', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
sim_note     [label = '↳ Fits n_sims per design\\nand returns power', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
pilot -> interpolator
pilot -> base_models
base_models -> sim_engine [label = 'Key parameter estimates']
sim_engine -> interpolator [dir = both, arrowhead = inv, arrowtail = inv, label = 'Sample Requests &\\n Data Return', penwidth = 2.5, style = bold]
sim_engine -> power_out [label = 'Compute Power']
interpolator -> interp_note [arrowhead = none, style = dashed]
sim_engine -> sim_note [arrowhead = none, style = dashed]
}
")
# 2. Export to SVG
svg_code <- export_svg(graph)
# 3. Convert SVG to high-quality PNG or PDF
rsvg_png(charToRaw(svg_code), file = "methodology_diagram.png", width = 2000, height = 1500)
rsvg_pdf(charToRaw(svg_code), file = "methodology_diagram.pdf", width = 20, height = 15)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
# 1. Define your DiagrammeR graph
graph <- grViz("
digraph methodology {
graph [layout = dot, rankdir = TB, splines = ortho]
node [shape = box, style = filled, fontname = Helvetica, fontsize = 13, penwidth=1.5, width=2.5, height=0.7]
pilot        [label = 'Pilot Data\\n(From earlier experiments)', fillcolor = '#AED6F1']
interpolator [label = 'Simulation data generating\\nAlgorithm', fillcolor = '#F9E79F']
base_models  [label = 'Recommended models\\n(LMM & CPH)', fillcolor = '#A3E4D7']
sim_engine   [label = 'Sample Size Simulation Engine\\n(Fits n_sims & \\nComputes Power)', fillcolor = '#F5B7B1']
power_out    [label = 'Power and optimal\\n sample Estimates\\n(Proportion of Rejections)', shape = oval, fillcolor = '#D7BDE2']
interp_note  [label = '↳ Returns data per\\ncandidate sample size', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
sim_note     [label = '↳ Fits n_sims per design\\nand returns power', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
pilot -> interpolator
pilot -> base_models
base_models -> sim_engine [label = 'Key parameter estimates']
sim_engine -> interpolator [dir = both, arrowhead = inv, arrowtail = inv, label = 'Sample Requests &\\n Data Return', penwidth = 2.5, style = bold]
sim_engine -> power_out [label = 'Compute Power']
interpolator -> interp_note [arrowhead = none, style = dashed]
sim_engine -> sim_note [arrowhead = none, style = dashed]
}
")
# 2. Export to SVG
svg_code <- export_svg(graph)
# 3. Convert SVG to high-quality PNG or PDF
rsvg_png(charToRaw(svg_code), file = "methodology_diagram.png", width = 2000, height = 1500)
rsvg_pdf(charToRaw(svg_code), file = "methodology_diagram.pdf", width = 20, height = 15)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
# 1. Define your DiagrammeR graph
graph <- grViz("
digraph methodology {
graph [layout = dot, rankdir = TB, splines = ortho]
node [shape = box, style = filled, fontname = Helvetica, fontsize = 13, penwidth=1.5, width=2.5, height=0.7]
pilot        [label = 'Pilot Data\\n(From earlier experiments)', fillcolor = '#AED6F1']
interpolator [label = 'Simulation data generating\\nAlgorithm', fillcolor = '#F9E79F']
base_models  [label = 'Recommended models\\n(LMM & CPH)', fillcolor = '#A3E4D7']
sim_engine   [label = 'Sample Size Simulation Engine\\n(Fits n_sims & \\nComputes Power)', fillcolor = '#F5B7B1']
power_out    [label = 'Power and optimal\\n sample Estimates\\n(Proportion of Rejections)', shape = oval, fillcolor = '#D7BDE2']
interp_note  [label = '↳ Returns data per\\ncandidate sample size', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
sim_note     [label = '↳ Fits n_sims per design\\nand returns power', shape = note, style = dashed, fontsize=12, fontname = Helvetica, fillcolor = white]
pilot -> interpolator
pilot -> base_models
base_models -> sim_engine [label = 'Key parameter estimates']
sim_engine -> interpolator [dir = both, arrowhead = inv, arrowtail = inv, label = 'Sample Requests\\n & Data Return', penwidth = 2.5, style = bold]
sim_engine -> power_out [label = 'Compute Power']
interpolator -> interp_note [arrowhead = none, style = dashed]
sim_engine -> sim_note [arrowhead = none, style = dashed]
}
")
# 2. Export to SVG
svg_code <- export_svg(graph)
# 3. Convert SVG to high-quality PNG or PDF
rsvg_png(charToRaw(svg_code), file = "methodology_diagram.png", width = 2000, height = 1500)
rsvg_pdf(charToRaw(svg_code), file = "methodology_diagram.pdf", width = 20, height = 15)
shiny::runApp('ShinyApp')
